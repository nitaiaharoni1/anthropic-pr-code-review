name: "Anthropic PR Code Review"
description: "Performs an AI-based code review on a pull request using the Anthropic API."
author: "Nitai Aharoni"
branding:
  color: "orange"
  icon: "eye"

inputs:
  anthropic_api_key:
    description: "Your Anthropic API key."
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Get git diff
      id: git-diff
      shell: bash
      run: |
        echo "Getting diff between ${{ github.event.pull_request.base.sha }} and ${{ github.event.pull_request.head.sha }}"
        git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > diff.txt
        echo "Diff size: $(wc -l < diff.txt) lines"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub

    - name: Send to Anthropic API
      shell: bash
      run: |
        cat << 'EOL' > review_script.py
        import os
        import json
        import requests
        from github import Github
        import sys

        def create_review_prompt(pr_title, pr_body, diff_content):
            return f"""You are a master software engineer reviewing a pull request. Please provide a thorough code review.

        Changes Overview:
        Title: {pr_title}
        Description: {pr_body or 'No description provided'}

        Changes:
        ```diff
        {diff_content}
        ```

        Please analyze these changes and provide:
        1. Summary of changes
        2. Code quality analysis
        3. Performance impact
        4. Security review
        5. Improvement suggestions
        6. Questions for clarification

        Use markdown formatting."""

        try:
            # Read the diff content
            with open('diff.txt', 'r', encoding='utf-8') as f:
                diff_content = f.read().strip()
            
            if not diff_content:
                raise ValueError("No diff content found")

            # Get PR details from GitHub API
            g = Github(os.environ["GITHUB_TOKEN"])
            repo = g.get_repo(os.environ["GITHUB_REPOSITORY"])
            pr_number = int(os.environ["PR_NUMBER"])
            pr = repo.get_pull(pr_number)

            # Generate the review prompt
            prompt = create_review_prompt(pr.title, pr.body, diff_content)

            # Make Anthropic API request
            headers = {
                "x-api-key": os.environ["ANTHROPIC_API_KEY"],
                "anthropic-version": "2023-06-01",
                "content-type": "application/json"
            }

            data = {
                "model": "claude-3-5-sonnet-20241022",
                "max_tokens": 8192,
                "messages": [
                    {"role": "user", "content": prompt}
                ]
            }

            print("Sending request to Anthropic API...")
            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers=headers,
                json=data,
                timeout=30
            )
            response.raise_for_status()

            # Extract review content
            try:
                review_content = response.json()["content"][0]["text"]
            except (KeyError, IndexError) as e:
                print(f"Error parsing API response: {e}")
                print(f"Raw response: {response.text}")
                raise

            print("Posting review comment...")
            pr.create_issue_comment(review_content)
            print("Review posted successfully!")

        except Exception as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            sys.exit(1)
        EOL

        python review_script.py
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
        PR_NUMBER: ${{ github.event.pull_request.number }}